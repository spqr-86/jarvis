"""
–ì—Ä–∞—Ñ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞ Jarvis.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
"""

import logging
import json
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from enum import Enum

from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langgraph.graph import StateGraph, END

from jarvis.llm.models import LLMService
from jarvis.llm.chains.base import TaskExtractor, TaskExtractionChain
from jarvis.llm.chains.task import TaskCreationChain
from jarvis.utils.helpers import generate_uuid, format_timestamp, extract_entities

logger = logging.getLogger(__name__)


class TaskState(str, Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥—Ä–∞—Ñ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á."""
    
    START = "start"
    CLASSIFY_INTENT = "classify_intent"
    EXTRACT_TASK = "extract_task"
    CREATE_TASK = "create_task"
    LIST_TASKS = "list_tasks"
    UPDATE_TASK = "update_task"
    DELETE_TASK = "delete_task"
    GENERATE_RESPONSE = "generate_response"
    END = "end"


class TaskGraph:
    """
    –ì—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞—á–∞–º–∏.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
    """
    
    def __init__(self, llm_service: LLMService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á.
        
        Args:
            llm_service: –°–µ—Ä–≤–∏—Å LLM –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥—Ä–∞—Ñ–µ
        """
        self.llm_service = llm_service
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫
        self.task_extraction_chain = TaskExtractionChain(llm_service)
        self.task_creation_chain = TaskCreationChain(llm_service)
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å LLM
        self.system_message = """
        –¢—ã ‚Äî —Å–µ–º–µ–π–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Jarvis, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
        –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á–∏.
        –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.
        """
    
    async def process_message(
        self,
        user_input: str,
        user_id: str,
        family_id: Optional[str],
        chat_history: List[Dict[str, str]]
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞–¥–∞—á–∞–º–∏.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –¥–æ–º–µ–Ω–∞ –∑–∞–¥–∞—á
            task_intent, confidence = await self._classify_task_intent(user_input)
            
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–∞–º–∏, –Ω–∏–∑–∫–∞—è,
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–±—â–µ–º—É –≥—Ä–∞—Ñ—É
            if confidence < 0.6:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–∞–º–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence})")
                return None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞
            result = None
            
            if task_intent == "create_task":
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                result = await self._handle_create_task(user_input, user_id, family_id)
            elif task_intent == "list_tasks":
                # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
                result = await self._handle_list_tasks(user_input, user_id, family_id)
            elif task_intent == "update_task":
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                result = await self._handle_update_task(user_input, user_id, family_id)
            elif task_intent == "delete_task":
                # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                result = await self._handle_delete_task(user_input, user_id, family_id)
            elif task_intent == "mark_completed":
                # –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
                result = await self._handle_mark_completed(user_input, user_id, family_id)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–Ω—Ç–µ–Ω—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–¥–∞—á
                result = await self._handle_general_task_query(user_input, user_id, family_id)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            if not result:
                return None
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–Ω—Ç–µ
            result.update({
                "domain": "task_management",
                "intent": task_intent,
                "confidence": confidence
            })
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≥—Ä–∞—Ñ–µ –∑–∞–¥–∞—á: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –∫ –æ–±—â–µ–º—É –≥—Ä–∞—Ñ—É
            return None
    
    async def _classify_task_intent(self, user_input: str) -> Tuple[str, float]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–¥–∞—á.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∏–Ω—Ç–µ–Ω—Ç, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
        """
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        system_message = """
        –¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞—á–∞–º–∏.
        –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–º—É —Ç–∏–ø—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        
        –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã:
        - create_task: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        - list_tasks: –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        - update_task: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        - delete_task: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        - mark_completed: –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        - task_question: –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –∑–∞–¥–∞—á–∞—Ö
        """
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        prompt = f"""
        –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}
        
        –û–ø—Ä–µ–¥–µ–ª–∏ –∏–Ω—Ç–µ–Ω—Ç –∏ –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "intent": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω—Ç–µ–Ω—Ç–∞",
            "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1
        }}
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            response = await self.llm_service.generate_response(
                prompt=prompt,
                system_message=system_message
            )
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            result = json.loads(response)
            
            return result.get("intent", "task_question"), result.get("confidence", 0.0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏: {str(e)}")
            return "task_question", 0.5
    
    async def _handle_create_task(
        self,
        user_input: str,
        user_id: str,
        family_id: str
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        task_data = await self.task_extraction_chain.process(user_input)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É)
        task_response = await self.task_creation_chain.process(task_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = task_response.message
        
        # –°–æ–∑–¥–∞–µ–º UI-–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
        ui_action = {
            "type": "show_keyboard",
            "message": "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            "keyboard": [
                ["üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", "‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞—á—É"],
                ["üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
            ],
            "one_time": True
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "response": response,
            "task_id": task_response.task_id,
            "task_info": task_data.dict(),
            "success": task_response.success,
            "ui_action": ui_action
        }
    
    async def _handle_list_tasks(
        self,
        user_input: str,
        user_id: str,
        family_id: str
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        mock_tasks = [
            {"id": "task1", "description": "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "deadline": "—Å–µ–≥–æ–¥–Ω—è", "priority": "—Å—Ä–µ–¥–Ω–∏–π"},
            {"id": "task2", "description": "–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞", "deadline": "–∑–∞–≤—Ç—Ä–∞", "priority": "–≤—ã—Å–æ–∫–∏–π"},
            {"id": "task3", "description": "–ó–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É", "deadline": "3 –¥–Ω—è", "priority": "–Ω–∏–∑–∫–∏–π"}
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response = "–í–æ—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
        
        for task in mock_tasks:
            priority_icon = "üî¥" if task["priority"] == "–≤—ã—Å–æ–∫–∏–π" else "üü°" if task["priority"] == "—Å—Ä–µ–¥–Ω–∏–π" else "üü¢"
            response += f"{priority_icon} {task['description']} (—Å—Ä–æ–∫: {task['deadline']})\n"
        
        # –°–æ–∑–¥–∞–µ–º UI-–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
        ui_action = {
            "type": "show_inline_keyboard",
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", "callback_data": "task_mark_completed"},
                    {"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "callback_data": "task_delete"}
                ],
                [
                    {"text": "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "callback_data": "task_create"}
                ]
            ]
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "response": response,
            "tasks": mock_tasks,
            "ui_action": ui_action
        }
    
    async def _handle_update_task(
        self,
        user_input: str,
        user_id: str,
        family_id: str
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
        # –∞ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        response = "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "response": response,
            "success": True
        }
    
    async def _handle_delete_task(
        self,
        user_input: str,
        user_id: str,
        family_id: str
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        response = "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "response": response,
            "success": True
        }
    
    async def _handle_mark_completed(
        self,
        user_input: str,
        user_id: str,
        family_id: str
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ—Ç–∫—É –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        response = "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. üéâ"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "response": response,
        }
