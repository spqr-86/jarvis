"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.
"""

from decimal import Decimal
from datetime import datetime
from enum import Enum
from typing import List, Optional, Dict, Any, Union
from pydantic import BaseModel, Field, validator

from jarvis.utils.helpers import generate_uuid


class BudgetCategory(str, Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    FOOD = "food"
    HOUSING = "housing"
    TRANSPORT = "transport"
    UTILITIES = "utilities"
    ENTERTAINMENT = "entertainment"
    HEALTHCARE = "healthcare"
    EDUCATION = "education"
    SHOPPING = "shopping"
    SAVINGS = "savings"
    INCOME = "income"
    OTHER = "other"
    
    @classmethod
    def get_ru_name(cls, category: "BudgetCategory") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        ru_names = {
            cls.FOOD: "–ü–∏—Ç–∞–Ω–∏–µ",
            cls.HOUSING: "–ñ–∏–ª—å—ë",
            cls.TRANSPORT: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            cls.UTILITIES: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
            cls.ENTERTAINMENT: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            cls.HEALTHCARE: "–ó–¥–æ—Ä–æ–≤—å–µ",
            cls.EDUCATION: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            cls.SHOPPING: "–ü–æ–∫—É–ø–∫–∏",
            cls.SAVINGS: "–°–±–µ—Ä–µ–∂–µ–Ω–∏—è",
            cls.INCOME: "–î–æ—Ö–æ–¥—ã",
            cls.OTHER: "–î—Ä—É–≥–æ–µ"
        }
        return ru_names.get(category, "–î—Ä—É–≥–æ–µ")
    
    @classmethod
    def get_icon(cls, category: "BudgetCategory") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        icons = {
            cls.FOOD: "üçΩÔ∏è",
            cls.HOUSING: "üè†",
            cls.TRANSPORT: "üöó",
            cls.UTILITIES: "üí°",
            cls.ENTERTAINMENT: "üé≠",
            cls.HEALTHCARE: "üè•",
            cls.EDUCATION: "üìö",
            cls.SHOPPING: "üõí",
            cls.SAVINGS: "üí∞",
            cls.INCOME: "üíµ",
            cls.OTHER: "üì¶"
        }
        return icons.get(category, "üì¶")
    
    @classmethod
    def get_expense_categories(cls) -> List["BudgetCategory"]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤."""
        return [
            cls.FOOD,
            cls.HOUSING,
            cls.TRANSPORT,
            cls.UTILITIES,
            cls.ENTERTAINMENT,
            cls.HEALTHCARE,
            cls.EDUCATION,
            cls.SHOPPING,
            cls.SAVINGS,
            cls.OTHER
        ]


class TransactionType(str, Enum):
    """–¢–∏–ø—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    
    INCOME = "income"
    EXPENSE = "expense"
    
    @classmethod
    def get_ru_name(cls, type_: "TransactionType") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        ru_names = {
            cls.INCOME: "–î–æ—Ö–æ–¥",
            cls.EXPENSE: "–†–∞—Å—Ö–æ–¥"
        }
        return ru_names.get(type_, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


class RecurringFrequency(str, Enum):
    """–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    
    DAILY = "daily"
    WEEKLY = "weekly"
    MONTHLY = "monthly"
    QUARTERLY = "quarterly"
    YEARLY = "yearly"
    
    @classmethod
    def get_ru_name(cls, frequency: "RecurringFrequency") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã."""
        ru_names = {
            cls.DAILY: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
            cls.WEEKLY: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
            cls.MONTHLY: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ",
            cls.QUARTERLY: "–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ",
            cls.YEARLY: "–ï–∂–µ–≥–æ–¥–Ω–æ"
        }
        return ru_names.get(frequency, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


class GoalPriority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏."""
    
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"
    
    @classmethod
    def get_ru_name(cls, priority: "GoalPriority") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
        ru_names = {
            cls.LOW: "–ù–∏–∑–∫–∏–π",
            cls.MEDIUM: "–°—Ä–µ–¥–Ω–∏–π",
            cls.HIGH: "–í—ã—Å–æ–∫–∏–π",
            cls.URGENT: "–°—Ä–æ—á–Ω—ã–π"
        }
        return ru_names.get(priority, "–°—Ä–µ–¥–Ω–∏–π")


class Money(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º."""
    
    amount: Decimal = Field(..., description="–°—É–º–º–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–∫–æ–ø–µ–π–∫–∞—Ö)")
    currency: str = Field("RUB", description="–í–∞–ª—é—Ç–∞ (ISO –∫–æ–¥)")
    
    @validator("amount")
    def validate_amount(cls, v):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è."""
        if v < 0:
            raise ValueError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        return v
    
    def format(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        currency_symbols = {
            "RUB": "‚ÇΩ",
            "USD": "$",
            "EUR": "‚Ç¨"
        }
        symbol = currency_symbols.get(self.currency, self.currency)
        return f"{self.amount:.2f} {symbol}"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return {
            "amount": str(self.amount),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            "currency": self.currency
        }


class Transaction(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    
    id: str = Field(default_factory=generate_uuid, description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    amount: Decimal = Field(..., description="–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    currency: str = Field("RUB", description="–í–∞–ª—é—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    category: BudgetCategory = Field(..., description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    transaction_type: TransactionType = Field(..., description="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    date: datetime = Field(default_factory=datetime.now, description="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    family_id: str = Field(..., description="ID —Å–µ–º—å–∏")
    created_by: str = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
    tags: List[str] = Field(default_factory=list, description="–¢–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    is_recurring: bool = Field(False, description="–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è")
    recurring_frequency: Optional[RecurringFrequency] = Field(None, description="–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è)")
    created_at: datetime = Field(default_factory=datetime.now, description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    updated_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    @validator("amount")
    def validate_amount(cls, v):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è."""
        if v <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return v
    
    def format_amount(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        currency_symbols = {
            "RUB": "‚ÇΩ",
            "USD": "$",
            "EUR": "‚Ç¨"
        }
        symbol = currency_symbols.get(self.currency, self.currency)
        return f"{self.amount:.2f} {symbol}"
    
    def get_money(self) -> Money:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ Money."""
        return Money(amount=self.amount, currency=self.currency)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return {
            "id": self.id,
            "amount": str(self.amount),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            "currency": self.currency,
            "category": self.category.value,
            "transaction_type": self.transaction_type.value,
            "description": self.description,
            "date": self.date.isoformat(),
            "family_id": self.family_id,
            "created_by": self.created_by,
            "tags": self.tags,
            "is_recurring": self.is_recurring,
            "recurring_frequency": self.recurring_frequency.value if self.recurring_frequency else None,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat() if self.updated_at else None
        }
    
    @classmethod
    def create_expense(
        cls,
        amount: Decimal,
        category: BudgetCategory,
        description: str,
        family_id: str,
        created_by: str,
        currency: str = "RUB",
        **kwargs
    ) -> "Transaction":
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞.
        
        Args:
            amount: –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
            family_id: ID —Å–µ–º—å–∏
            created_by: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            currency: –í–∞–ª—é—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Returns:
            –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        """
        return cls(
            amount=amount,
            currency=currency,
            category=category,
            transaction_type=TransactionType.EXPENSE,
            description=description,
            family_id=family_id,
            created_by=created_by,
            **kwargs
        )
    
    @classmethod
    def create_income(
        cls,
        amount: Decimal,
        description: str,
        family_id: str,
        created_by: str,
        currency: str = "RUB",
        **kwargs
    ) -> "Transaction":
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ—Ö–æ–¥–∞.
        
        Args:
            amount: –°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
            family_id: ID —Å–µ–º—å–∏
            created_by: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            currency: –í–∞–ª—é—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Returns:
            –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ—Ö–æ–¥–∞
        """
        return cls(
            amount=amount,
            currency=currency,
            category=BudgetCategory.INCOME,
            transaction_type=TransactionType.INCOME,
            description=description,
            family_id=family_id,
            created_by=created_by,
            **kwargs
        )


class CategoryBudget(BaseModel):
    """–ú–æ–¥–µ–ª—å –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    
    category: BudgetCategory = Field(..., description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
    limit: Decimal = Field(..., description="–õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    currency: str = Field("RUB", description="–í–∞–ª—é—Ç–∞ –ª–∏–º–∏—Ç–∞")
    spent: Decimal = Field(0, description="–£–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    def get_remaining(self) -> Decimal:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –ø–æ –±—é–¥–∂–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return max(Decimal('0'), self.limit - self.spent)
    
    def get_progress_percentage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        if self.limit == 0:
            return 100.0 if self.spent > 0 else 0.0
        return min(100.0, float(self.spent / self.limit * 100))
    
    def is_exceeded(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return self.spent > self.limit
    
    def add_expense(self, amount: Decimal) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
        
        Args:
            amount: –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞
        """
        self.spent += amount
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return {
            "category": self.category.value,
            "limit": str(self.limit),
            "currency": self.currency,
            "spent": str(self.spent)
        }


class Budget(BaseModel):
    """–ú–æ–¥–µ–ª—å –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥."""
    
    id: str = Field(default_factory=generate_uuid, description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞")
    name: str = Field("–ë—é–¥–∂–µ—Ç", description="–ù–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞")
    family_id: str = Field(..., description="ID —Å–µ–º—å–∏")
    period_start: datetime = Field(..., description="–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞")
    period_end: datetime = Field(..., description="–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞")
    currency: str = Field("RUB", description="–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –±—é–¥–∂–µ—Ç–∞")
    income_plan: Decimal = Field(0, description="–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥")
    income_actual: Decimal = Field(0, description="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥")
    category_budgets: Dict[BudgetCategory, CategoryBudget] = Field(default_factory=dict, description="–ë—é–¥–∂–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    created_by: str = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –±—é–¥–∂–µ—Ç")
    created_at: datetime = Field(default_factory=datetime.now, description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
    updated_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    def get_total_budget(self) -> Decimal:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π –±—é–¥–∂–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–µ—Ä–∏–æ–¥."""
        return sum(category.limit for category in self.category_budgets.values())
    
    def get_total_spent(self) -> Decimal:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        return sum(category.spent for category in self.category_budgets.values())
    
    def get_remaining_budget(self) -> Decimal:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –ø–æ –±—é–¥–∂–µ—Ç—É."""
        return max(Decimal('0'), self.get_total_budget() - self.get_total_spent())
    
    def get_current_balance(self) -> Decimal:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã)."""
        return self.income_actual - self.get_total_spent()
    
    def add_category_budget(self, category: BudgetCategory, limit: Decimal) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
            limit: –õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        self.category_budgets[category] = CategoryBudget(
            category=category,
            limit=limit,
            currency=self.currency,
            spent=Decimal('0')
        )
        self.updated_at = datetime.now()
    
    def update_category_limit(self, category: BudgetCategory, limit: Decimal) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
            limit: –ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
            
        Returns:
            True, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False
        """
        if category not in self.category_budgets:
            return False
        
        self.category_budgets[category].limit = limit
        self.updated_at = datetime.now()
        return True
    
    def add_income(self, amount: Decimal) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Ö–æ–¥ –≤ –±—é–¥–∂–µ—Ç.
        
        Args:
            amount: –°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞
        """
        self.income_actual += amount
        self.updated_at = datetime.now()
    
    def add_expense(self, category: BudgetCategory, amount: Decimal) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤ –±—é–¥–∂–µ—Ç.
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞
            amount: –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞
        """
        if category not in self.category_budgets:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ —Å –Ω—É–ª–µ–≤—ã–º –ª–∏–º–∏—Ç–æ–º
            self.add_category_budget(category, Decimal('0'))
        
        self.category_budgets[category].add_expense(amount)
        self.updated_at = datetime.now()
    
    def process_transaction(self, transaction: Transaction) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –¥–æ–±–∞–≤–ª—è—è –µ–µ –≤ –±—é–¥–∂–µ—Ç.
        
        Args:
            transaction: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            True, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Ö–æ–¥–∏—Ç –≤ –ø–µ—Ä–∏–æ–¥ –±—é–¥–∂–µ—Ç–∞
        if transaction.date < self.period_start or transaction.date > self.period_end:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–π –∂–µ —Å–µ–º—å–µ
        if transaction.family_id != self.family_id:
            return False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–µ —Ç–∏–ø–∞
        if transaction.transaction_type == TransactionType.INCOME:
            self.add_income(transaction.amount)
        elif transaction.transaction_type == TransactionType.EXPENSE:
            self.add_expense(transaction.category, transaction.amount)
        
        return True
    
    def get_category_stats(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        stats = []
        for category, budget in self.category_budgets.items():
            stats.append({
                "category": category,
                "category_name": BudgetCategory.get_ru_name(category),
                "icon": BudgetCategory.get_icon(category),
                "limit": budget.limit,
                "spent": budget.spent,
                "remaining": budget.get_remaining(),
                "progress": budget.get_progress_percentage(),
                "is_exceeded": budget.is_exceeded()
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        return sorted(stats, key=lambda x: x["progress"], reverse=True)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return {
            "id": self.id,
            "name": self.name,
            "family_id": self.family_id,
            "period_start": self.period_start.isoformat(),
            "period_end": self.period_end.isoformat(),
            "currency": self.currency,
            "income_plan": str(self.income_plan),
            "income_actual": str(self.income_actual),
            "category_budgets": {
                category.value: budget.to_dict()
                for category, budget in self.category_budgets.items()
            },
            "created_by": self.created_by,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat() if self.updated_at else None
        }
    
    @classmethod
    def create_monthly_budget(
        cls,
        year: int,
        month: int,
        family_id: str,
        created_by: str,
        income_plan: Decimal = Decimal('0'),
        name: Optional[str] = None,
        currency: str = "RUB"
    ) -> "Budget":
        """
        –°–æ–∑–¥–∞–µ—Ç –±—é–¥–∂–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü.
        
        Args:
            year: –ì–æ–¥
            month: –ú–µ—Å—è—Ü (1-12)
            family_id: ID —Å–µ–º—å–∏
            created_by: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –±—é–¥–∂–µ—Ç
            income_plan: –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –¥–æ—Ö–æ–¥
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            currency: –í–∞–ª—é—Ç–∞ –±—é–¥–∂–µ—Ç–∞
            
        Returns:
            –ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü
        """
        from calendar import monthrange
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–∞
        if month < 1 or month > 12:
            raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
        
        # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        days_in_month = monthrange(year, month)[1]
        period_start = datetime(year, month, 1, 0, 0, 0)
        period_end = datetime(year, month, days_in_month, 23, 59, 59)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }
        if name is None:
            name = f"–ë—é–¥–∂–µ—Ç –Ω–∞ {month_names[month]} {year}"
        
        return cls(
            name=name,
            family_id=family_id,
            period_start=period_start,
            period_end=period_end,
            currency=currency,
            income_plan=income_plan,
            income_actual=Decimal('0'),
            created_by=created_by
        )


class FinancialGoal(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏."""
    
    id: str = Field(default_factory=generate_uuid, description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–∏")
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
    target_amount: Decimal = Field(..., description="–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞")
    current_amount: Decimal = Field(0, description="–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π")
    currency: str = Field("RUB", description="–í–∞–ª—é—Ç–∞ —Ü–µ–ª–∏")
    start_date: datetime = Field(default_factory=datetime.now, description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    deadline: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞")
    family_id: str = Field(..., description="ID —Å–µ–º—å–∏")
    created_by: str = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Ü–µ–ª—å")
    priority: GoalPriority = Field(GoalPriority.MEDIUM, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏")
    notes: Optional[str] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏")
    created_at: datetime = Field(default_factory=datetime.now, description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    updated_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    @validator("target_amount", "current_amount")
    def validate_amount(cls, v):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è."""
        if v < 0:
            raise ValueError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        return v
    
    def update_progress(self, amount: Decimal) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏.
        
        Args:
            amount: –°—É–º–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        self.current_amount += amount
        self.updated_at = datetime.now()
    
    def get_progress_percentage(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏.
        
        Returns:
            –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –æ—Ç 0 –¥–æ 100
        """
        if self.target_amount == 0:
            return 100.0
        return min(100.0, float(self.current_amount / self.target_amount * 100))
    
    def get_remaining_amount(self) -> Decimal:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.
        
        Returns:
            –û—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞
        """
        return max(Decimal('0'), self.target_amount - self.current_amount)
    
    def is_completed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å.
        
        Returns:
            True, –µ—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∏–Ω–∞—á–µ False
        """
        return self.current_amount >= self.target_amount
    
    def calculate_monthly_contribution(self) -> Optional[Decimal]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ —Å—Ä–æ–∫.
        
        Returns:
            –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å –∏–ª–∏ None, –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        if not self.deadline:
            return None
        
        remaining_amount = self.get_remaining_amount()
        if remaining_amount <= 0:
            return Decimal('0')
        
        now = datetime.now()
        if now >= self.deadline:
            return remaining_amount
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        months_remaining = (self.deadline.year - now.year) * 12 + self.deadline.month - now.month
        if months_remaining <= 0:
            return remaining_amount
        
        return remaining_amount / Decimal(months_remaining)
    
    def format_amount(self, amount: Decimal) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            amount: –°—É–º–º–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        currency_symbols = {
            "RUB": "‚ÇΩ",
            "USD": "$",
            "EUR": "‚Ç¨"
        }
        symbol = currency_symbols.get(self.currency, self.currency)
        return f"{amount:.2f} {symbol}"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return {
            "id": self.id,
            "name": self.name,
            "target_amount": str(self.target_amount),
            "current_amount": str(self.current_amount),
            "currency": self.currency,
            "start_date": self.start_date.isoformat(),
            "deadline": self.deadline.isoformat() if self.deadline else None,
            "family_id": self.family_id,
            "created_by": self.created_by,
            "priority": self.priority.value,
            "notes": self.notes,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat() if self.updated_at else None
        }
