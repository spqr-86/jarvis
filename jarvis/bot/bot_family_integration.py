"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º—å–µ–π –≤ Telegram-–±–æ—Ç–∞.
"""

import logging
from typing import Dict, Any, List, Optional
from uuid import uuid4
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

from jarvis.services.family import FamilyService
from jarvis.storage.relational.dal.user_dal import UserDAO, FamilyDAO


logger = logging.getLogger(__name__)


class FamilyBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º—å–µ–π –≤ Telegram-–±–æ—Ç–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º—å–∏."""
        self.user_dao = UserDAO()
        self.family_dao = FamilyDAO()
    
    def register_handlers(self, application: Application) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ–º—å–µ–π.
        
        Args:
            application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
        """
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("family", self.family_command))
        application.add_handler(CommandHandler("create_family", self.create_family_command))
        application.add_handler(CommandHandler("invite_to_family", self.invite_to_family_command))
        application.add_handler(CommandHandler("leave_family", self.leave_family_command))
        application.add_handler(CommandHandler("rename_family", self.rename_family_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
        application.add_handler(CallbackQueryHandler(self.handle_family_callback, pattern="^family_"))
    
    async def family_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /family –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–º—å–µ."""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.user_dao.get_by_telegram_id(str(user.id))
        
        if not db_user or not db_user.family_id:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ–º—å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_family –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        family = FamilyService.get_family_by_user(db_user.id)
        
        if not family:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–º—å–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
        members = FamilyService.get_family_members(family.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"*–°–µ–º—å—è: {family.name}*\n\n"
        message += "–ß–ª–µ–Ω—ã —Å–µ–º—å–∏:\n"
        
        for member in members:
            member_name = member.first_name or member.username
            if member.id == family.created_by:
                message += f"üëë {member_name} (–°–æ–∑–¥–∞—Ç–µ–ª—å)\n"
            else:
                message += f"üë• {member_name}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="family_invite"),
                InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="family_remove")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–µ–º—å—é", callback_data="family_rename")
            ]
        ]
        
        await update.message.reply_text(
            message, 
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def create_family_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_family –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏."""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏)
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /create_family –°–µ–º—å—è –ò–≤–∞–Ω–æ–≤—ã—Ö"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.user_dao.get_by_telegram_id(str(user.id))
        
        if not db_user:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–µ–º—å–∏
        if db_user.family_id:
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ–º—å–∏."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
        family_name = " ".join(context.args)
        family = FamilyService.create_family(
            name=family_name, 
            created_by=db_user.id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ–º—å—é
        FamilyService.add_member(
            family_id=family.id, 
            user_id=db_user.id
        )
        
        await update.message.reply_text(
            f"–°–µ–º—å—è '{family_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
    
    async def invite_to_family_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /invite_to_family –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é."""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not context.args or len(context.args) != 1:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /invite_to_family 123456789"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.user_dao.get_by_telegram_id(str(user.id))
        
        if not db_user or not db_user.family_id:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_family"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invitee_telegram_id = context.args[0]
        
        # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
        result = FamilyService.invite_to_family(
            family_id=db_user.family_id,
            inviter_id=db_user.id,
            invitee_telegram_id=invitee_telegram_id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if result["success"]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if "user_id" in result:
                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–º—å—é '{result['family_id']}'! üéâ"
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—â–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
                await update.message.reply_text(
                    f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é '{result['invite_data']['family_name']}' "
                    f"–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ "
                    f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ."
                )
        else:
            await update.message.reply_text(result["message"])
    
    async def leave_family_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leave_family –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ–º—å–∏."""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.user_dao.get_by_telegram_id(str(user.id))
        
        if not db_user or not db_user.family_id:
            await update.message.reply_text(
                "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–µ–º—å–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        family = self.family_dao.get(db_user.family_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–µ–º—å–∏
        members = FamilyService.get_family_members(family.id)
        
        if family.created_by == db_user.id and len(members) > 1:
            await update.message.reply_text(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é, —Ç–∞–∫ –∫–∞–∫ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. "
                "–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É."
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ–º—å–∏
        success = FamilyService.remove_member(family.id, db_user.id)
        
        if success:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤ —Å–µ–º—å–µ, —É–¥–∞–ª—è–µ–º —Å–µ–º—å—é
            if len(members) == 1:
                self.family_dao.delete(id=family.id)
            
            await update.message.reply_text(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ–º—å—é. üëã"
            )
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def rename_family_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rename_family –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–µ–º—å–∏."""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /rename_family –°–µ–º—å—è –ü–µ—Ç—Ä–æ–≤—ã—Ö"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.user_dao.get_by_telegram_id(str(user.id))
        
        if not db_user or not db_user.family_id:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_family"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        family = self.family_dao.get(db_user.family_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–µ–º—å–∏
        if family.created_by != db_user.id:
            await update.message.reply_text(
                "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –µ–µ."
            )
            return
        
        # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏
        new_family_name = " ".join(context.args)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏
        family.name = new_family_name
        family.updated_at = datetime.now()
        self.family_dao.session.commit()
        
        await update.message.reply_text(
            f"–°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_family_name}'. üéâ"
        )
    
    async def handle_family_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–µ–º—å–µ–π."""
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        user = query.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.user_dao.get_by_telegram_id(str(user.id))
        
        if not db_user or not db_user.family_id:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏.")
            return
        
        action = query.data.split("_")[1] if len(query.data.split("_")) > 1 else ""
        
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, 
        # —Ñ–æ—Ä–º–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")