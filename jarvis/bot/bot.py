import logging
from typing import Dict, Any, Optional, List, Tuple

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from uuid import uuid4

from jarvis.config import TELEGRAM_BOT_TOKEN
from jarvis.llm.models import LLMService
from jarvis.storage.vector.chroma_store import VectorStoreService
from jarvis.utils.helpers import generate_uuid
from jarvis.llm.graphs.router import ConversationRouter
from jarvis.bot.bot_integration import register_modules
from jarvis.bot.bot_shopping_integration import ShoppingBotIntegration
from jarvis.bot.bot_budget_integration import BudgetBotIntegration
from jarvis.bot.bot_family_integration import FamilyBotIntegration
from jarvis.storage.relational.dal.user_dal import UserDAO


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
llm_service = LLMService()
vector_store = VectorStoreService()
user_dao = UserDAO()
shopping_integration = ShoppingBotIntegration()
budget_integration = BudgetBotIntegration()
family_integration = FamilyBotIntegration()
conversation_router = ConversationRouter(llm_service)

# –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è LLM
SYSTEM_MESSAGE = """
–¢—ã ‚Äî —Å–µ–º–µ–π–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Jarvis, –ø–æ–º–æ–≥–∞—é—â–∏–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ–º–µ–π–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
"""

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
USER_SESSIONS: Dict[int, Dict[str, Any]] = {}


from jarvis.services.family_registration import FamilyRegistrationService

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
    tg_user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_dao = UserDAO()
    db_user = user_dao.get_by_telegram_id(str(tg_user.id))
    
    if not db_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db_user = user_dao.create(obj_in={
            "id": str(uuid4()),
            "telegram_id": str(tg_user.id),
            "username": tg_user.username,
            "first_name": tg_user.first_name,
            "last_name": tg_user.last_name
        })
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ–º—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        family, is_new_family = FamilyRegistrationService.create_or_get_family(
            user_id=db_user.id, 
            family_name=f"–°–µ–º—å—è {tg_user.first_name}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_new_family:
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {tg_user.first_name}! –Ø Jarvis ‚Äî –≤–∞—à —Å–µ–º–µ–π–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. ü§ñ\n\n"
            f"–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å —Å–µ–º—å—é '{family.name}'. "
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—â–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫\n"
            f"‚Ä¢ –í–µ—Å—Ç–∏ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç\n"
            f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è\n\n"
            f"–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
        )
    else:
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {tg_user.first_name}! –Ø Jarvis ‚Äî –≤–∞—à —Å–µ–º–µ–π–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. ü§ñ\n\n"
            f"–†–∞–¥, —á—Ç–æ –≤—ã —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å! –í–∞—à–∞ —Å–µ–º—å—è '{family.name}' —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
            f"–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
            f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            f"‚Ä¢ –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
            f"‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º\n\n"
            f"–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º ID —Å–µ–º—å–∏
    user_id = tg_user.id
    if user_id not in USER_SESSIONS:
        USER_SESSIONS[user_id] = {
            "chat_history": [],
            "family_id": family.id
        }
    else:
        USER_SESSIONS[user_id]["family_id"] = family.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚Ä¢ /shopping - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫\n"
        "‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    await update.message.reply_text(help_text)


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    user_id = update.effective_user.id
    if user_id in USER_SESSIONS:
        USER_SESSIONS[user_id]["chat_history"] = []
    
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")


async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in USER_SESSIONS:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = user_dao.get_by_telegram_id(str(user_id))
        
        if db_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            USER_SESSIONS[user_id] = {
                "chat_history": [],
                "family_id": db_user.family_id,
                "db_user_id": db_user.id
            }
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            await update.message.reply_text(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    session = USER_SESSIONS[user_id]
    chat_history = session["chat_history"]
    family_id = session["family_id"]
    db_user_id = session["db_user_id"]

    # –ï—Å–ª–∏ family_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é
    if not family_id:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–º—å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_family –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ–º—å–∏."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action="typing"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–∞–∫–æ–π –≥—Ä–∞—Ñ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    result = await conversation_router.route_message(
        user_input=message_text,
        user_id=db_user_id,
        family_id=family_id,
        chat_history=[{"role": msg["role"], "content": msg["content"]} for msg in chat_history[-5:]]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    if not result or "response" not in result:
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å,
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
    else:
        response = result["response"]
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    chat_history.append({"role": "user", "content": message_text})
    chat_history.append({"role": "assistant", "content": response})
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    interaction_id = generate_uuid()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    domain = result.get("domain", "general")
    intent = result.get("intent", "unknown")
    confidence = result.get("confidence", 0.0)
    entities = result.get("entities", {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await vector_store.add_texts(
        texts=[message_text, response], 
        metadatas=[
            {
                "family_id": family_id,
                "user_id": str(user_id),
                "type": "user_message",
                "interaction_id": interaction_id,
                "domain": domain,
                "intent": intent,
                "confidence": confidence,
                "has_entities": len(entities) > 0
            },
            {
                "family_id": family_id,
                "user_id": str(user_id),
                "type": "assistant_response",
                "interaction_id": interaction_id,
                "domain": domain,
                "intent": intent
            }
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(response)
    

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"Update {update} caused error {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


def run_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("clear", clear_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –¥—Ä.)
    register_modules(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    run_bot()
