"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—é–¥–∂–µ—Ç–∞ –≤ Telegram-–±–æ—Ç–∞.
"""

import logging
from typing import Dict, Any, List, Optional, Tuple
from decimal import Decimal
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

from jarvis.llm.graphs.budget_graph import BudgetGraph
from jarvis.storage.relational.budget import (
    TransactionRepository,
    BudgetRepository, 
    FinancialGoalRepository
)
from jarvis.core.models.budget import (
    BudgetCategory, TransactionType, GoalPriority, RecurringFrequency
)

logger = logging.getLogger(__name__)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
def get_expense_categories_keyboard() -> List[List[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    categories = [
        ["üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ", "üè† –ñ–∏–ª—å—ë", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
        ["üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üè• –ó–¥–æ—Ä–æ–≤—å–µ"],
        ["üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "üõí –ü–æ–∫—É–ø–∫–∏", "üí∞ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è"]
    ]
    return categories


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º
def get_budget_keyboard() -> List[List[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º."""
    keyboard = [
        ["üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"],
        ["üìä –ü–æ–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç", "üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"],
        ["üéØ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", "üìà –û—Ç—á–µ—Ç—ã"]
    ]
    return keyboard


class BudgetBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—é–¥–∂–µ—Ç–∞ –≤ Telegram-–±–æ—Ç–∞."""
    
    def __init__(
        self,
        transaction_repository: Optional[TransactionRepository] = None,
        budget_repository: Optional[BudgetRepository] = None,
        goal_repository: Optional[FinancialGoalRepository] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞.
        
        Args:
            transaction_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            budget_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—é–¥–∂–µ—Ç–∞–º–∏
            goal_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏
        """
        self.transaction_repository = transaction_repository or TransactionRepository()
        self.budget_repository = budget_repository or BudgetRepository()
        self.goal_repository = goal_repository or FinancialGoalRepository()
        self.budget_graph = BudgetGraph(
            transaction_repository=self.transaction_repository,
            budget_repository=self.budget_repository,
            goal_repository=self.goal_repository
        )
    
    def register_handlers(self, application):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±—é–¥–∂–µ—Ç–æ–º.
        
        Args:
            application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
        """
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—é–¥–∂–µ—Ç–æ–º
        application.add_handler(CommandHandler("budget", self.budget_command))
        application.add_handler(CommandHandler("expense", self.add_expense_command))
        application.add_handler(CommandHandler("income", self.add_income_command))
        application.add_handler(CommandHandler("transactions", self.show_transactions_command))
        application.add_handler(CommandHandler("goals", self.show_goals_command))
        application.add_handler(CommandHandler("report", self.show_report_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.handle_budget_callback, pattern="^budget_"))
    
    async def process_budget_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –±—é–¥–∂–µ—Ç–æ–º.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –±—é–¥–∂–µ—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∏–Ω–∞—á–µ False
        """
        user = update.effective_user
        user_id = str(user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        message_text = update.message.text
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ –±—é–¥–∂–µ—Ç–∞
        result = await self.budget_graph.process_message(
            user_input=message_text,
            user_id=user_id,
            family_id=family_id
        )
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –±—é–¥–∂–µ—Ç–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
        if not result.get("is_budget_related", False):
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            await update.message.reply_text(
                result["response"],
                reply_markup=ReplyKeyboardMarkup(
                    get_budget_keyboard(),
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
        
        return True
    
    async def budget_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /budget –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º."""
        keyboard = get_budget_keyboard()
        
        await update.message.reply_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –±—é–¥–∂–µ—Ç–æ–º?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    
    async def add_expense_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /expense –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞."""
        args = context.args
        
        if not args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "/expense <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /expense 1500 –ø–∏—Ç–∞–Ω–∏–µ –æ–±–µ–¥",
                reply_markup=ReplyKeyboardMarkup(
                    get_expense_categories_keyboard(),
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç
        expense_text = " ".join(args)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        result = await self.budget_graph.process_message(
            user_input=f"–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ {expense_text}",
            user_id=user_id,
            family_id=family_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            await update.message.reply_text(result["response"])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥.")
    
    async def add_income_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /income –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞."""
        args = context.args
        
        if not args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "/income <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /income 45000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç
        income_text = " ".join(args)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        result = await self.budget_graph.process_message(
            user_input=f"–î–æ–±–∞–≤—å –¥–æ—Ö–æ–¥ {income_text}",
            user_id=user_id,
            family_id=family_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            await update.message.reply_text(result["response"])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥.")
    
    async def show_transactions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /transactions –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
        now = datetime.now()
        start_date = datetime(now.year, now.month, 1)
        if now.month == 12:
            end_date = datetime(now.year + 1, 1, 1) - timedelta(seconds=1)
        else:
            end_date = datetime(now.year, now.month + 1, 1) - timedelta(seconds=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = await self.transaction_repository.get_transactions_for_family(
            family_id=family_id,
            start_date=start_date,
            end_date=end_date,
            limit=15  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        )
        
        if not transactions:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ {start_date.strftime('%B %Y')}*\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
        incomes = [t for t in transactions if t.transaction_type == TransactionType.INCOME]
        expenses = [t for t in transactions if t.transaction_type == TransactionType.EXPENSE]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö
        if incomes:
            total_income = sum(t.amount for t in incomes)
            message += f"*–î–æ—Ö–æ–¥—ã ({len(incomes)}) - {total_income} ‚ÇΩ:*\n"
            for income in incomes:
                date_str = income.date.strftime("%d.%m")
                message += f"- {date_str} üí∞ {income.description}: {income.amount} ‚ÇΩ\n"
            message += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
        if expenses:
            total_expense = sum(t.amount for t in expenses)
            message += f"*–†–∞—Å—Ö–æ–¥—ã ({len(expenses)}) - {total_expense} ‚ÇΩ:*\n"
            for expense in expenses:
                date_str = expense.date.strftime("%d.%m")
                icon = BudgetCategory.get_icon(expense.category)
                category_name = BudgetCategory.get_ru_name(expense.category)
                message += f"- {date_str} {icon} {expense.description}: {expense.amount} ‚ÇΩ ({category_name})\n"
            message += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = sum(t.amount for t in incomes) - sum(t.amount for t in expenses)
        message += f"*–ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ*"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data="budget_report_month"),
                InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="budget_filter_category")
            ],
            [
                InlineKeyboardButton("üìÜ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="budget_prev_month"),
                InlineKeyboardButton("üìÜ –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", callback_data="budget_next_month")
            ]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def show_goals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goals –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π."""
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        result = await self.budget_graph.process_message(
            user_input="–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏",
            user_id=user_id,
            family_id=family_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—è–º–∏
        if "response" in result and result["response"]:
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å", callback_data="budget_create_goal"),
                    InlineKeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="budget_update_goal")
                ],
                [
                    InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="budget_add_to_goal"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", callback_data="budget_delete_goal")
                ]
            ]
            
            await update.message.reply_text(
                result["response"],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª—è—Ö.")
    
    async def show_report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        result = await self.budget_graph.process_message(
            user_input="–ü–æ–∫–∞–∂–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
            user_id=user_id,
            family_id=family_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="budget_report_categories"),
                    InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data="budget_report_trends")
                ],
                [
                    InlineKeyboardButton("üìÖ –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="budget_report_prev_month"),
                    InlineKeyboardButton("üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="budget_save_report")
                ]
            ]
            
            await update.message.reply_text(
                result["response"],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç.")
    
    async def handle_budget_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –±—é–¥–∂–µ—Ç–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        user_id = str(query.from_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
        action = query.data.split("_")[1] if len(query.data.split("_")) > 1 else ""
        
        if action == "add_expense":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞
            await self._show_add_expense_form(query)
        
        elif action == "add_income":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
            await self._show_add_income_form(query)
        
        elif action == "view_budget":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç
            await self._show_current_budget(query, user_id, family_id)
        
        elif action == "create_budget":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
            await self._show_create_budget_form(query)
        
        elif action == "transactions":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await self._show_transactions(query, user_id, family_id)
        
        elif action == "goals":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
            await self._show_goals(query, user_id, family_id)
        
        elif action == "report":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
            await self._show_financial_report(query, user_id, family_id)
        
        elif action == "report_month":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü
            await self._show_monthly_report(query, user_id, family_id)
        
        elif action == "report_categories":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            await self._show_categories_report(query, user_id, family_id)
        
        elif action == "report_trends":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
            await self._show_expense_trends(query, user_id, family_id)
        
        elif action == "create_goal":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏
            await self._show_create_goal_form(query)
        
        elif action == "update_goal":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏
            await self._show_update_goal_form(query, user_id, family_id)
        
        elif action == "add_to_goal":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏
            await self._show_add_to_goal_form(query, user_id, family_id)
        
        elif action == "delete_goal":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏
            await self._show_delete_goal_confirmation(query, user_id, family_id)
        
        elif action == "save_report":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await self._save_financial_report(query, user_id, family_id)
        
        elif action == "prev_month" or action == "next_month":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π/—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            await self._show_transactions_for_month(query, user_id, family_id, action == "prev_month")
    
    async def _show_add_expense_form(self, query) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
        """
        message = (
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "*—Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø–∏—Å–∞–Ω–∏–µ*\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `1500 –ø–∏—Ç–∞–Ω–∏–µ –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        keyboard = []
        for category in BudgetCategory.get_expense_categories():
            icon = BudgetCategory.get_icon(category)
            name = BudgetCategory.get_ru_name(category)
            keyboard.append([
                InlineKeyboardButton(f"{icon} {name}", callback_data=f"budget_category_{category.value}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")
        ])
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def _show_add_income_form(self, query) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
        """
        message = (
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "*—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ*\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `45000 –∑–∞—Ä–ø–ª–∞—Ç–∞`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Ö–æ–¥–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –¥–æ—Ö–æ–¥–æ–≤
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", callback_data="budget_income_salary"),
                InlineKeyboardButton("üí∏ –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", callback_data="budget_income_freelance")
            ],
            [
                InlineKeyboardButton("üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="budget_income_gift"),
                InlineKeyboardButton("üíπ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data="budget_income_investment")
            ],
            [
                InlineKeyboardButton("üîÑ –í–æ–∑–≤—Ä–∞—Ç", callback_data="budget_income_refund"),
                InlineKeyboardButton("üìù –î—Ä—É–≥–æ–µ", callback_data="budget_income_other")
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")
            ]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def _show_current_budget(self, query, user_id: str, family_id: str) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç
        current_budget = await self.budget_repository.get_current_budget(family_id)
        
        if not current_budget:
            # –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?"
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç", callback_data="budget_create_budget")
                ],
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")
                ]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—é–¥–∂–µ—Ç–µ
        start_date = current_budget.period_start.strftime("%d.%m.%Y")
        end_date = current_budget.period_end.strftime("%d.%m.%Y")
        
        message = f"üìä *{current_budget.name}*\n"
        message += f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö
        message += f"üí∞ –î–æ—Ö–æ–¥—ã: {current_budget.income_actual} –∏–∑ {current_budget.income_plan} ‚ÇΩ\n"
        message += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {current_budget.get_total_spent()} –∏–∑ {current_budget.get_total_budget()} ‚ÇΩ\n"
        
        # –ë–∞–ª–∞–Ω—Å
        balance = current_budget.get_current_balance()
        message += f"üìà –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        message += "*–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
        stats = current_budget.get_category_stats()
        
        for stat in stats:
            category = stat["category"]
            icon = stat["icon"]
            category_name = stat["category_name"]
            spent = stat["spent"]
            limit = stat["limit"]
            progress = stat["progress"]
            is_exceeded = stat["is_exceeded"]
            
            progress_bar = "‚ñì" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
            status = "‚ö†Ô∏è" if is_exceeded else ""
            
            message += f"{icon} {category_name}: {spent}/{limit} ‚ÇΩ [{progress_bar}] {status}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º
        keyboard = [
            [
                InlineKeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="budget_add_expense"),
                InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", callback_data="budget_add_income")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="budget_update_budget"),
                InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="budget_report")
            ],
            [
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="budget_cancel")
            ]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (_show_create_budget_form, _show_transactions –∏ —Ç.–¥.)
    # –Ø –æ–ø—É—Å—Ç–∏–ª –∏—Ö –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –∏—Ö –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –≤—ã—à–µ –º–µ—Ç–æ–¥–∞–º