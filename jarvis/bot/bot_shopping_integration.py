"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ Telegram-–±–æ—Ç–∞.
"""

import logging
from typing import Dict, Any, List, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

from jarvis.llm.graphs.shopping_graph import ShoppingGraph
from jarvis.storage.relational.shopping import ShoppingListRepository
from jarvis.core.models.shopping import ItemCategory, ItemPriority

logger = logging.getLogger(__name__)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
def get_categories_keyboard() -> List[List[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤."""
    categories = [
        ["üçû –•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ", "ü•õ –ú–æ–ª–æ—á–Ω—ã–µ", "ü•© –ú—è—Å–æ/–†—ã–±–∞"],
        ["ü•¶ –û–≤–æ—â–∏", "üçé –§—Ä—É–∫—Ç—ã", "ü•´ –ë–∞–∫–∞–ª–µ—è"],
        ["üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ", "üß¥ –ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è", "üìù –î—Ä—É–≥–æ–µ"]
    ]
    return categories


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫
def get_shopping_keyboard() -> List[List[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫."""
    keyboard = [
        ["üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º"],
        ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫"]
    ]
    return keyboard


class ShoppingBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ Telegram-–±–æ—Ç–∞."""
    
    def __init__(self, shopping_repository: Optional[ShoppingListRepository] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.
        
        Args:
            shopping_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
        """
        self.repository = shopping_repository or ShoppingListRepository()
        self.shopping_graph = ShoppingGraph(shopping_repository=self.repository)
    
    def register_handlers(self, application):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫.
        
        Args:
            application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
        """
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫
        application.add_handler(CommandHandler("shopping", self.shopping_command))
        application.add_handler(CommandHandler("add", self.add_item_command))
        application.add_handler(CommandHandler("list", self.show_list_command))
        application.add_handler(CommandHandler("clear_list", self.clear_list_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.handle_shopping_callback, pattern="^shopping_"))
    
    async def process_shopping_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∏–Ω–∞—á–µ False
        """
        user = update.effective_user
        user_id = str(user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        message_text = update.message.text
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
        result = await self.shopping_graph.process_message(
            user_input=message_text,
            user_id=user_id,
            family_id=family_id
        )
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
        if not result.get("is_shopping_related", False):
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            await update.message.reply_text(
                result["response"],
                reply_markup=ReplyKeyboardMarkup(
                    get_shopping_keyboard(),
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
        
        return True
    
    async def shopping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shopping –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫."""
        keyboard = get_shopping_keyboard()
        
        await update.message.reply_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    
    async def add_item_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫."""
        args = context.args
        
        if not args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /add –º–æ–ª–æ–∫–æ 1–ª, —Ö–ª–µ–± 2 —à—Ç, —Å—ã—Ä 300–≥",
                reply_markup=ReplyKeyboardMarkup(
                    get_categories_keyboard(),
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç
        item_text = " ".join(args)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        result = await self.shopping_graph.process_message(
            user_input=f"–î–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ {item_text}",
            user_id=user_id,
            family_id=family_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            await update.message.reply_text(result["response"])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.")
    
    async def show_list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫."""
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        active_list = await self.repository.get_active_list_for_family(family_id)
        
        if not active_list:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /add –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_items = active_list.sort_by_category()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìã *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫*\n\n"
        
        if not active_list.items:
            message += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /add –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
        else:
            unpurchased_items = active_list.get_unpurchased_items()
            purchased_items = active_list.get_purchased_items()
            
            message += f"*–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ({len(unpurchased_items)}):*\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category, items in categorized_items.items():
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–∫—É–ø–ª–µ–Ω–Ω—ã–µ
                category_items = [item for item in items if not item.is_purchased]
                if not category_items:
                    continue
                
                category_name = ItemCategory.get_ru_name(category)
                message += f"\n*{category_name}:*\n"
                
                for item in category_items:
                    priority_icon = ""
                    if item.priority == ItemPriority.HIGH:
                        priority_icon = "üî¥ "
                    elif item.priority == ItemPriority.URGENT:
                        priority_icon = "‚ùóÔ∏è "
                    
                    quantity_str = f"{item.quantity}"
                    if item.unit:
                        quantity_str += f" {item.unit}"
                    
                    message += f"- {priority_icon}{item.name} ({quantity_str})\n"
            
            if purchased_items:
                message += f"\n*–£–∂–µ –∫—É–ø–ª–µ–Ω–æ ({len(purchased_items)}):*\n"
                for item in purchased_items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    message += f"- ‚úÖ {item.name}\n"
                
                if len(purchased_items) > 5:
                    message += f"... –∏ –µ—â–µ {len(purchased_items) - 5}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º", callback_data="shopping_mark"),
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="shopping_clear")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="shopping_stats")
            ]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def clear_list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_list –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫."""
        user_id = str(update.effective_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
        result = await self.shopping_graph.process_message(
            user_input="–û—á–∏—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫",
            user_id=user_id,
            family_id=family_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "response" in result and result["response"]:
            await update.message.reply_text(result["response"])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.")
    
    async def handle_shopping_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        user_id = str(query.from_user.id)
        family_id = f"family_{user_id}"  # –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
        action = query.data.split("_")[1] if len(query.data.split("_")) > 1 else ""
        
        if action == "mark":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
            await self._show_mark_keyboard(query, user_id, family_id)
        
        elif action == "clear":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
            keyboard = [
                [
                    InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="shopping_clear_confirm"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="shopping_cancel")
                ]
            ]
            
            await query.edit_message_text(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif action == "clear_confirm":
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            result = await self.shopping_graph.process_message(
                user_input="–û—á–∏—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫",
                user_id=user_id,
                family_id=family_id
            )
            
            if "response" in result and result["response"]:
                await query.edit_message_text(result["response"])
            else:
                await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.")
        
        elif action == "stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫
            await self._show_shopping_stats(query, user_id, family_id)
        
        elif action == "cancel":
            # –û—Ç–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await self._refresh_shopping_list(query, user_id, family_id)
        
        elif action.startswith("mark_item_"):
            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π
            item_id = action.split("mark_item_")[1]
            await self._mark_item_as_purchased(query, user_id, family_id, item_id)
        
        elif action == "back_to_list":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫
            await self._refresh_shopping_list(query, user_id, family_id)
    
    async def _show_mark_keyboard(self, query, user_id: str, family_id: str) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        active_list = await self.repository.get_active_list_for_family(family_id)
        
        if not active_list or not active_list.items:
            await query.edit_message_text("–í —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        unpurchased_items = active_list.get_unpurchased_items()
        
        if not unpurchased_items:
            await query.edit_message_text(
                "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ! üéâ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = []
        for item in unpurchased_items:
            keyboard.append([
                InlineKeyboardButton(
                    f"{item.name} ({item.quantity}{' ' + item.unit if item.unit else ''})",
                    callback_data=f"shopping_mark_item_{item.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
        keyboard.append([
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")
        ])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _mark_item_as_purchased(self, query, user_id: str, family_id: str, item_id: str) -> None:
        """
        –û—Ç–º–µ—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏
            item_id: ID —Ç–æ–≤–∞—Ä–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        active_list = await self.repository.get_active_list_for_family(family_id)
        
        if not active_list:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.")
            return
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
        item = active_list.get_item(item_id)
        if not item:
            await query.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")]
                ])
            )
            return
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π
        success = await self.repository.mark_item_as_purchased(
            list_id=active_list.id,
            item_id=item_id,
            by_user_id=user_id
        )
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–ø–æ–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            unpurchased_items = active_list.get_unpurchased_items()
            
            if not unpurchased_items:
                await query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä \"{item.name}\" –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π! üéâ\n\n"
                    "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéä",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")]
                    ])
                )
            else:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
                keyboard = []
                for unpurchased_item in unpurchased_items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{unpurchased_item.name} ({unpurchased_item.quantity}{' ' + unpurchased_item.unit if unpurchased_item.unit else ''})",
                            callback_data=f"shopping_mark_item_{unpurchased_item.id}"
                        )
                    ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
                keyboard.append([
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")
                ])
                
                await query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä \"{item.name}\" –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π! ‚úÖ\n\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å: {len(unpurchased_items)}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            await query.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")]
                ])
            )
    
    async def _refresh_shopping_list(self, query, user_id: str, family_id: str) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        active_list = await self.repository.get_active_list_for_family(family_id)
        
        if not active_list:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_items = active_list.sort_by_category()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìã *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫*\n\n"
        
        if not active_list.items:
            message += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /add –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
        else:
            unpurchased_items = active_list.get_unpurchased_items()
            purchased_items = active_list.get_purchased_items()
            
            message += f"*–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ({len(unpurchased_items)}):*\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category, items in categorized_items.items():
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–∫—É–ø–ª–µ–Ω–Ω—ã–µ
                category_items = [item for item in items if not item.is_purchased]
                if not category_items:
                    continue
                
                category_name = ItemCategory.get_ru_name(category)
                message += f"\n*{category_name}:*\n"
                
                for item in category_items:
                    priority_icon = ""
                    if item.priority == ItemPriority.HIGH:
                        priority_icon = "üî¥ "
                    elif item.priority == ItemPriority.URGENT:
                        priority_icon = "‚ùóÔ∏è "
                    
                    quantity_str = f"{item.quantity}"
                    if item.unit:
                        quantity_str += f" {item.unit}"
                    
                    message += f"- {priority_icon}{item.name} ({quantity_str})\n"
            
            if purchased_items:
                message += f"\n*–£–∂–µ –∫—É–ø–ª–µ–Ω–æ ({len(purchased_items)}):*\n"
                for item in purchased_items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    message += f"- ‚úÖ {item.name}\n"
                
                if len(purchased_items) > 5:
                    message += f"... –∏ –µ—â–µ {len(purchased_items) - 5}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º", callback_data="shopping_mark"),
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="shopping_clear")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="shopping_stats")
            ]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def _show_shopping_stats(self, query, user_id: str, family_id: str) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback_query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            family_id: ID —Å–µ–º—å–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        active_list = await self.repository.get_active_list_for_family(family_id)
        
        if not active_list:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_items = len(active_list.items)
        purchased_items = len(active_list.get_purchased_items())
        unpurchased_items = len(active_list.get_unpurchased_items())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_items = active_list.sort_by_category()
        category_stats = []
        
        for category, items in categorized_items.items():
            category_name = ItemCategory.get_ru_name(category)
            category_total = len(items)
            category_purchased = len([item for item in items if item.is_purchased])
            
            category_stats.append({
                "name": category_name,
                "total": category_total,
                "purchased": category_purchased,
                "progress": category_purchased / category_total if category_total > 0 else 1.0
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫*\n\n"
        message += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n"
        message += f"–ö—É–ø–ª–µ–Ω–æ: {purchased_items} ({int(purchased_items / total_items * 100) if total_items > 0 else 0}%)\n"
        message += f"–û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å: {unpurchased_items}\n\n"
        
        if category_stats:
            message += "*–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for stat in category_stats:
                progress_percentage = int(stat["progress"] * 100)
                progress_bar = "‚ñì" * (progress_percentage // 10) + "‚ñë" * (10 - progress_percentage // 10)
                
                message += f"{stat['name']}: {stat['purchased']}/{stat['total']} [{progress_bar}] {progress_percentage}%\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
        keyboard = [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="shopping_back_to_list")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )